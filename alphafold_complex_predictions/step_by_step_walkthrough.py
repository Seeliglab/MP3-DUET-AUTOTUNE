#AML
#doing a indepth debugging and reassess of results

from general_funcs import * 

#redoing malb default 
#test_df = padj_cv_regression('malb', binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_malb_regression_default.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = False, weights = False, pool = False,size_test = 43)
# test_df.to_csv('07_23_malb_regression_default_small_43.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = False, weights = False, pool = False,size_test = 84)
# test_df.to_csv('07_23_malb_regression_default_small_84.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = False, weights = False, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_regression_default_small_123.csv', index = False)
# print (test_df)
#test padj sort regression of NCIP set 
#padj_cv_regression(set_name, binned = False, weights = False, pool = True)
# test_df = padj_cv_regression('ncip', binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_ncip_regression_default.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('ncip', binned = False, weights = True, pool = False)
# test_df.to_csv('07_23_ncip_regression_weights.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('ncip', binned = True, weights = False, pool = False)
# test_df.to_csv('07_23_ncip_regression_binned.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('ncip', binned = True, weights = True, pool = False)
# test_df.to_csv('07_23_ncip_regression_binned_weights.csv', index = False)
# print (test_df)

# #smaller training set (to match hold out training set size)
# #padj_cv_regression(set_name, binned = False, weights = False, pool = True)
# test_df = padj_cv_regression('ncip', binned = False, weights = False, pool = False,size_test = 44)
# test_df.to_csv('07_23_ncip_regression_default_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('ncip', binned = False, weights = True, pool = False,size_test = 44)
# test_df.to_csv('07_23_ncip_regression_weights_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('ncip', binned = True, weights = False, pool = False,size_test = 44)
# test_df.to_csv('07_23_ncip_regression_binned_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('ncip', binned = True, weights = True, pool = False,size_test = 44)
# test_df.to_csv('07_23_ncip_regression_binned_weights_small.csv', index = False)
# print (test_df)

"""
#classification 
test_df = padj_cv_classification('ncip', binned = False, weights = False, pool = False)
test_df.to_csv('07_23_ncip_classification_default.csv', index = False)
print (test_df)
test_df = padj_cv_classification('ncip', binned = False, weights = True, pool = False)
test_df.to_csv('07_23_ncip_classification_weights.csv', index = False)
print (test_df)
test_df = padj_cv_classification('ncip', binned = True, weights = False, pool = False)
test_df.to_csv('07_23_ncip_classification_binned.csv', index = False)
print (test_df)
test_df = padj_cv_classification('ncip', binned = True, weights = True, pool = False)
test_df.to_csv('07_23_ncip_classification_binned_weights.csv', index = False)
print (test_df)

#smaller training set (to match hold out training set size)
#padj_cv_classification(set_name, binned = False, weights = False, pool = True)
test_df = padj_cv_classification('ncip', binned = False, weights = False, pool = False,size_test = 44)
test_df.to_csv('07_23_ncip_classification_default_small.csv', index = False)
print (test_df)
test_df = padj_cv_classification('ncip', binned = False, weights = True, pool = False,size_test = 44)
test_df.to_csv('07_23_ncip_classification_weights_small.csv', index = False)
print (test_df)
test_df = padj_cv_classification('ncip', binned = True, weights = False, pool = False,size_test = 44)
test_df.to_csv('07_23_ncip_classification_binned_small.csv', index = False)
print (test_df)
test_df = padj_cv_classification('ncip', binned = True, weights = True, pool = False,size_test = 44)
test_df.to_csv('07_23_ncip_classification_binned_weights_small.csv', index = False)
print (test_df)
"""

#malb task now  
#padj_cv_regression(set_name, binned = False, weights = False, pool = True)
# test_df = padj_cv_regression('malb', binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_malb_regression_default.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = False, weights = True, pool = False)
# test_df.to_csv('07_23_malb_regression_weights.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = True, weights = False, pool = False)
# test_df.to_csv('07_23_malb_regression_binned.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = True, weights = True, pool = False)
# test_df.to_csv('07_23_malb_regression_binned_weights.csv', index = False)
# print (test_df)

#smaller training set (to match hold out training set size)
#padj_cv_regression(set_name, binned = False, weights = False, pool = True)
# test_df = padj_cv_regression('malb', binned = False, weights = False, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_regression_default_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = False, weights = True, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_regression_weights_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = True, weights = False, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_regression_binned_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = True, weights = True, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_regression_binned_weights_small.csv', index = False)
# print (test_df)

#holdout ncip 
#holdout_cv_regression(set_name, hold_size, num_samples = 0, binned = False, weights = False, pool = True):
#test_df = holdout_cv_regression('ncip', hold_size = 1, binned = False, weights = False, pool = False)
#test_df.to_csv('07_23_ncip_regression_hold_1_default.csv', index = False)
#print (test_df)
#test_df = holdout_cv_regression('ncip', hold_size = 2, binned = False, weights = False, pool = False)
#test_df.to_csv('07_23_ncip_regression_hold_2_default.csv', index = False)
#print (test_df)
#test_df = holdout_cv_regression('malb', hold_size = 1, num_samples = 12, binned = False, weights = False, pool = False)
#test_df.to_csv('07_23_malb_regression_hold_1_default.csv', index = False)
#print (test_df)
#test_df = holdout_cv_regression('malb', hold_size = 2, num_samples = 12, binned = False, weights = False, pool = False)
#test_df.to_csv('07_23_malb_regression_hold_2_default.csv', index = False)
#print (test_df)

# test_df = padj_cv_classification('malb', binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_malb_classification_default.csv', index = False)
# print (test_df)
# test_df = padj_cv_classification('malb', binned = False, weights = True, pool = False)
# test_df.to_csv('07_23_malb_classification_weights.csv', index = False)
# print (test_df)
# test_df = padj_cv_classification('malb', binned = True, weights = False, pool = False)
# test_df.to_csv('07_23_malb_classification_binned.csv', index = False)
# print (test_df)
# test_df = padj_cv_classification('malb', binned = True, weights = True, pool = False)
# test_df.to_csv('07_23_malb_classification_binned_weights.csv', index = False)
# print (test_df)

#smaller training set (to match hold out training set size)
#padj_cv_classification(set_name, binned = False, weights = False, pool = True)
# test_df = padj_cv_classification('malb', binned = False, weights = False, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_classification_default_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_classification('malb', binned = False, weights = True, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_classification_weights_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_classification('malb', binned = True, weights = False, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_classification_binned_small.csv', index = False)
# print (test_df)
# test_df = padj_cv_classification('malb', binned = True, weights = True, pool = False,size_test = 123)
# test_df.to_csv('07_23_malb_classification_binned_weights_small.csv', index = False)
# print (test_df)

#holdout classif ncip 
# test_df = holdout_cv_classification('ncip', hold_size = 1, binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_ncip_classification_hold_1_default.csv', index = False)
# print (test_df)
# test_df = holdout_cv_classification('ncip', hold_size = 2, binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_ncip_classification_hold_2_default.csv', index = False)
#print (test_df)

# test_df = holdout_cv_classification('malb', hold_size = 1, num_samples = 12, binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_malb_classification_hold_1_default.csv', index = False)
# print (test_df)
# test_df = holdout_cv_classification('malb', hold_size = 2, num_samples = 12, binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_malb_classification_hold_2_default.csv', index = False)
# print (test_df)

# test_df = holdout_cv_classification('malb', hold_size = 3, num_samples = 12, binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_malb_classification_hold_3_default.csv', index = False)
# print (test_df)

# test_df = holdout_cv_regression('malb', hold_size = 3, num_samples = 12, binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_malb_regression_hold_3_default.csv', index = False)
# print (test_df)

# test_df = holdout_cv_regression('malb', hold_size = 1, num_samples = 12, binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_malb_regression_hold_1_default.csv', index = False)
# print (test_df)

#figure out the rest of the comparison set sizes 
#1 NICP comparison 
# test_df = padj_cv_classification('ncip', binned = False, weights = False, pool = False,size_test = 23)
# test_df.to_csv('07_23_ncip_classification_default_small_23.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('ncip', binned = False, weights = False, pool = False,size_test = 23)
# test_df.to_csv('07_23_ncip_regression_default_small_23.csv', index = False)
# print (test_df)
# #2 NICP comp - done

#1 malb comp 
# test_df = padj_cv_classification('malb', binned = False, weights = False, pool = False,size_test = 43)
# test_df.to_csv('07_23_malb_classification_default_small_43.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('malb', binned = False, weights = False, pool = False,size_test = 43)
# test_df.to_csv('07_23_malb_regression_default_small_43.csv', index = False)
# print (test_df)
# #2 malb comp
# test_df = padj_cv_classification('malb', binned = False, weights = False, pool = False,size_test = 84)
# test_df.to_csv('07_23_malb_classification_default_small_84.csv', index = False)
# print (test_df)


#both malb and ncip 
# test_df = padj_cv_classification(set_name = 'combo', binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_combo_classification_default.csv', index = False)
# print (test_df)
# test_df = padj_cv_regression('combo', binned = False, weights = False, pool = False)
# test_df.to_csv('07_23_combo_regression_default.csv', index = False)
# print (test_df)

#malb - didnt' save the test pairs for the classification task 
test_df = holdout_cv_classification('malb', hold_size = 1, num_samples = 12, binned = False, weights = False, pool = False)
test_df.to_csv('07_23_malb_classification_hold_1_default.csv', index = False)
print (test_df)
test_df = holdout_cv_classification('malb', hold_size = 2, num_samples = 12, binned = False, weights = False, pool = False)
test_df.to_csv('07_23_malb_classification_hold_2_default.csv', index = False)
print (test_df)

test_df = holdout_cv_classification('malb', hold_size = 3, num_samples = 12, binned = False, weights = False, pool = False)
test_df.to_csv('07_23_malb_classification_hold_3_default.csv', index = False)
print (test_df)